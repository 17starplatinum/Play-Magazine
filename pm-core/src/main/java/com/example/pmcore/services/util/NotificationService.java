package com.example.pmcore.services.util;

import com.example.backend.dto.EmailMessageDto;
import com.example.backend.exceptions.accepted.EmailSendingException;
import com.example.backend.model.auth.User;
import com.example.backend.model.data.subscriptions.Subscription;
import com.example.backend.repositories.auth.file.FileBasedUserRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class NotificationService {

    private final RabbitTemplate rabbitTemplate;
    private final FileBasedUserRepository userRepository;

    @Value("${spring.jms.template.default-destination}")
    private String emailQueue;


    public void notifyUserAboutAuthorRequestApproval(User user, String approvedBy, String role) {
        String message = switch (role) {
            case "ADMIN" -> {
                role = "–∞–¥–º–∏–Ω–∞";
                yield "–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ —Å–≤–æ–±–æ–¥–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.";
            }
            case "MODERATOR" -> {
                role = "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞";
                yield "–¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ä–æ–ª–∏, –∞ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.";
            }
            case "DEVELOPER" -> {
                role = "–∞–≤—Ç–æ—Ä–∞";
                yield "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.";
            }
            case "USER" -> {
                role = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
                yield "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏.";
            }
            default -> {
                role = "";
                yield "";
            }
        };

        String subject = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ %s –æ–¥–æ–±—Ä–µ–Ω–∞".formatted(role);
        String content = """
                <html>
                    <body>
                        <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, %s!</h2>
                        <p>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º %s.</p>
                        <p>%s</p>
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ PlayMagazine</p>
                    </body>
                </html>
                """.formatted(user.getUsername(), approvedBy, message);

        sendEmailAsync(user.getEmail(), subject, content);
    }

    public void notifyUserAboutAuthorRequestRejection(User user, String rejectedBy, String reason, String role) {
        String subject = "–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ %s".formatted(role);
        String content = """
                <html>
                    <body>
                        <h2>–£–≤–∞–∂–∞–µ–º—ã–π %s,</h2>
                        <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ %s –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º %s.</p>
                        <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> %s</p>
                        <p>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.</p>
                        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ PlayMagazine</p>
                    </body>
                </html>
                """.formatted(user.getUsername(), role, rejectedBy, reason);

        sendEmailAsync(user.getEmail(), subject, content);
    }

    public void notifyAdminsAboutNewAuthorRequest(User user) {
        String adminEmails = String.join(",", userRepository.findAdminEmails());

        String subject = "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞";
        String content = """
                <html>
                    <body>
                        <h2>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∞</h2>
                        <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%s) –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∞.</p>
                    </body>
                </html>
                """.formatted(user.getUsername(), user.getEmail());

        sendEmailAsync(adminEmails, subject, content);
    }

    public void notifyUserAboutSubscriptionCancellation(User user, Subscription subscription) {
        String subject = "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏";
        String content = """
                 <html>
                     <body>
                     <h2>–£–≤–∞–∂–∞–µ–º—ã–π %s,</h2>
                     <p>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É %s –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ %s.</p>
                     <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ PlayMagazine</p>
                     </body>
                 </html>
                """.formatted(user.getUsername(), subscription.getName(), subscription.getApp().getName());

        sendEmailAsync(user.getEmail(), subject, content);
    }

    public void notifyUserAboutSubscriptionAutoRenewal(User user, Subscription subscription, boolean state) {
        String subject = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏";
        String action = (state) ? "–ø–æ–¥–∫–ª—é—á–∏–ª–∏" : "–æ—Ç–∫–ª—é—á–∏–ª–∏";
        String content = """
                <html>
                    <body>
                    <h2>–£–≤–∞–∂–∞–µ–º—ã–π %s,</h2>
                    <p>–í—ã %s –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ %s –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ %s.</p>
                    <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ PlayMagazine</p>
                    </body>
                </html>
                """.formatted(user.getUsername(), action, subscription.getName(), subscription.getApp().getName());

        sendEmailAsync(user.getEmail(), subject, content);
    }

    @PostConstruct
    public void init() {
        ConnectionFactory connectionFactory = rabbitTemplate.getConnectionFactory();
        if (connectionFactory instanceof CachingConnectionFactory) {
            CachingConnectionFactory ccf = (CachingConnectionFactory) connectionFactory;
            System.out.println("üîó RabbitMQ Host: " + ccf.getHost());
            System.out.println("üîó RabbitMQ Port: " + ccf.getPort());
            System.out.println("üîó RabbitMQ Username: " + ccf.getUsername());
        }
    }

    private void sendEmailAsync(String to, String subject, String text) {
        try {
            EmailMessageDto message = new EmailMessageDto();
            message.setTo(to);
            message.setSubject(subject);
            message.setText(text);

            rabbitTemplate.convertAndSend(emailQueue, message);

            log.info("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {}", to);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {}: {}", to, e.getMessage());
            throw new EmailSendingException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å email –≤ –æ—á–µ—Ä–µ–¥—å", e);
        }
    }
}